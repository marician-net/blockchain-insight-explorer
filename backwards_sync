

Hi all,

Yesterday I've been thing about the sync and the installation process of mystery. 

I believe is a terrible use experience to have to wait 20+ hours to be explore the blockchain. I think this is not acceptable given that we are using a thin-object model. We should be able to provide basic exploration capatilities right away after the installation (given that the paired bitcoind server has the blockchain updated).

Also, having to run a different process (sync.js) independently adds complexity to installation and mantainance process, and generates other problems like: what happens is the process gets interrupted? what should the user do if he stops the server (and the p2p sync) to some time and then restart it? Should he run sync.js again?  What happends if bitcoind become unavailable for a while?

So, inspired on that Ryan's say about node async nature and Manuel's work to integrate p2p to the node http server, I thought the following process, when the server starts:

1)- Query bitcoind for the lastblock, if there is not sync task running, we trigger a backwards block synchronization, starting from the lastblock, backwards to the genesis block.

2)- set up a interval function to run 1) every X seconds. 

3)- start listening p2p

4)- start the serving http
  => Stream to every page:
      [ SYNC STATUS: xx%]
  => In address detail pages:
      [WARNING SYNC INCOMPLETE, BALANCEs ARE NOT SHOWN]
  

Advantages:
  - Simplicity for installation & maintenance 
  - Handles bitcoind and mystery outages & recovering
  - Opens a simple way to handle reorgs (the nextBlockHash needs to be stored on the Block model, so when the backward sync detects a incoherence in a block pointer, the old branch's transactions get flagged).
  - The user will be probably more interested on recent blocks (which get processed first) than old blocks.


PS: Synchronization works (since yesterday) is as follow:
 sync(blockHash)
 - retrive blockHash from RPC
   - Not found -> exit

 - check if we have the blockHash in mongo
   - if no
      -> Get transactions, parse transactions, insert transaction items in mongo
      -> Insert transaction Ids in mongo
      -> Insert Block Id in mongo
      - sync( directionIsForward ? nextHash : prevHash)
   - if yes
      -> exit.

